//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""CameraMovement"",
            ""id"": ""dd5db913-7350-4c2b-a01f-aab45dbe1c7f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5033cfe2-5e06-4fad-9c72-90c0ae147061"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b04548e1-baa5-44d2-afc8-1b0522f6975b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""2f5274f8-9212-4fd1-b863-6437fa96d415"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""45d515fa-c751-4e6a-a10f-bccfda5c371d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""18fddbda-5008-44e9-936c-b9f875f13ddd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBlock"",
                    ""type"": ""Button"",
                    ""id"": ""a5ed591c-2eae-429d-b7b0-ecf361410a27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DestroyBlock"",
                    ""type"": ""Button"",
                    ""id"": ""7cc0839f-cc75-416a-8f5f-e016229fe72a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5cc28b3-2edc-459f-a99c-3f4f911b0236"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Roll"",
                    ""id"": ""614f8283-3288-40cf-b179-f3dfc0e30012"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c22073f9-92ba-4123-a49d-e54cb372983a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c55c8538-84db-4dda-b3e0-15e42c6ec46a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3400f281-96bc-4406-8e07-7b18d49571f8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""id"": ""49e1ccdb-005e-4d38-92a0-54d46cf6249f"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""63017dba-8dc3-45f8-9385-5cfcc6968103"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""65c3d9b0-6db2-4051-8eee-2dbf2939d31a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""dc8afa3d-a7f1-4963-8fab-ceae082a73c1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""059cf835-96fc-4ea7-aaa4-1391533d95d8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a241c2e7-7624-4a03-875b-65d874d8c3a2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e5b1ff9-8e08-4eb8-9b62-12dea13dd3cb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccbd849b-cee9-4ebc-bece-d9e2b598c573"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DestroyBlock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""General"",
            ""id"": ""45234698-d8b6-445a-97b6-08733f181f04"",
            ""actions"": [
                {
                    ""name"": ""ToggleBuildingMode"",
                    ""type"": ""Button"",
                    ""id"": ""26242598-25fd-4f7a-a618-f2a799a409a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""492065b7-37fa-4499-bbac-90582d164144"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraMovement
        m_CameraMovement = asset.FindActionMap("CameraMovement", throwIfNotFound: true);
        m_CameraMovement_Move = m_CameraMovement.FindAction("Move", throwIfNotFound: true);
        m_CameraMovement_Sprint = m_CameraMovement.FindAction("Sprint", throwIfNotFound: true);
        m_CameraMovement_Roll = m_CameraMovement.FindAction("Roll", throwIfNotFound: true);
        m_CameraMovement_PointerPosition = m_CameraMovement.FindAction("PointerPosition", throwIfNotFound: true);
        m_CameraMovement_Submit = m_CameraMovement.FindAction("Submit", throwIfNotFound: true);
        m_CameraMovement_RotateBlock = m_CameraMovement.FindAction("RotateBlock", throwIfNotFound: true);
        m_CameraMovement_DestroyBlock = m_CameraMovement.FindAction("DestroyBlock", throwIfNotFound: true);
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_ToggleBuildingMode = m_General.FindAction("ToggleBuildingMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraMovement
    private readonly InputActionMap m_CameraMovement;
    private ICameraMovementActions m_CameraMovementActionsCallbackInterface;
    private readonly InputAction m_CameraMovement_Move;
    private readonly InputAction m_CameraMovement_Sprint;
    private readonly InputAction m_CameraMovement_Roll;
    private readonly InputAction m_CameraMovement_PointerPosition;
    private readonly InputAction m_CameraMovement_Submit;
    private readonly InputAction m_CameraMovement_RotateBlock;
    private readonly InputAction m_CameraMovement_DestroyBlock;
    public struct CameraMovementActions
    {
        private @InputActions m_Wrapper;
        public CameraMovementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CameraMovement_Move;
        public InputAction @Sprint => m_Wrapper.m_CameraMovement_Sprint;
        public InputAction @Roll => m_Wrapper.m_CameraMovement_Roll;
        public InputAction @PointerPosition => m_Wrapper.m_CameraMovement_PointerPosition;
        public InputAction @Submit => m_Wrapper.m_CameraMovement_Submit;
        public InputAction @RotateBlock => m_Wrapper.m_CameraMovement_RotateBlock;
        public InputAction @DestroyBlock => m_Wrapper.m_CameraMovement_DestroyBlock;
        public InputActionMap Get() { return m_Wrapper.m_CameraMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMovementActions set) { return set.Get(); }
        public void SetCallbacks(ICameraMovementActions instance)
        {
            if (m_Wrapper.m_CameraMovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnMove;
                @Sprint.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnSprint;
                @Roll.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnRoll;
                @PointerPosition.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnPointerPosition;
                @PointerPosition.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnPointerPosition;
                @Submit.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnSubmit;
                @Submit.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnSubmit;
                @Submit.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnSubmit;
                @RotateBlock.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnRotateBlock;
                @RotateBlock.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnRotateBlock;
                @RotateBlock.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnRotateBlock;
                @DestroyBlock.started -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnDestroyBlock;
                @DestroyBlock.performed -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnDestroyBlock;
                @DestroyBlock.canceled -= m_Wrapper.m_CameraMovementActionsCallbackInterface.OnDestroyBlock;
            }
            m_Wrapper.m_CameraMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
                @Submit.started += instance.OnSubmit;
                @Submit.performed += instance.OnSubmit;
                @Submit.canceled += instance.OnSubmit;
                @RotateBlock.started += instance.OnRotateBlock;
                @RotateBlock.performed += instance.OnRotateBlock;
                @RotateBlock.canceled += instance.OnRotateBlock;
                @DestroyBlock.started += instance.OnDestroyBlock;
                @DestroyBlock.performed += instance.OnDestroyBlock;
                @DestroyBlock.canceled += instance.OnDestroyBlock;
            }
        }
    }
    public CameraMovementActions @CameraMovement => new CameraMovementActions(this);

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_ToggleBuildingMode;
    public struct GeneralActions
    {
        private @InputActions m_Wrapper;
        public GeneralActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleBuildingMode => m_Wrapper.m_General_ToggleBuildingMode;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @ToggleBuildingMode.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnToggleBuildingMode;
                @ToggleBuildingMode.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnToggleBuildingMode;
                @ToggleBuildingMode.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnToggleBuildingMode;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleBuildingMode.started += instance.OnToggleBuildingMode;
                @ToggleBuildingMode.performed += instance.OnToggleBuildingMode;
                @ToggleBuildingMode.canceled += instance.OnToggleBuildingMode;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);
    public interface ICameraMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnRotateBlock(InputAction.CallbackContext context);
        void OnDestroyBlock(InputAction.CallbackContext context);
    }
    public interface IGeneralActions
    {
        void OnToggleBuildingMode(InputAction.CallbackContext context);
    }
}
